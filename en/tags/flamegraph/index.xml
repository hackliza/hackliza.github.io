<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>flamegraph on Hackliza</title>
    <link>https://hackliza.gal/en/tags/flamegraph/</link>
    <description>Recent content in flamegraph on Hackliza</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>gl</language>
    <lastBuildDate>Mon, 27 Jun 2022 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://hackliza.gal/en/tags/flamegraph/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Visual profiling in Python</title>
      <link>https://hackliza.gal/en/posts/python-visual-profiling/</link>
      <pubDate>Mon, 27 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://hackliza.gal/en/posts/python-visual-profiling/</guid>
      <description>Hey there!
 Today I bring a practical example of how we can analyze our Python programs to efficiently find bottlenecks.
 There&amp;#39;s a lot of talk on how optimizations shouldn&amp;#39;t be done blindly. That instead one should measure which parts of a program are problematic to improve the code execution in an efficient way. Today we will see how to do that in a practical way.
Flame Graphs  There are lots of ways to measure and visualize the behavior of a program.</description>
    </item>
    
  </channel>
</rss>